#!/bin/bash
#Kali source Script
#
#
#

kalSys="abootimg aircrack-ng cewl cgpt crunch dnsrecon dnsutils ethtool exploitdb fake-hwclock \
firefox-esr firmware-atheros firmware-linux firmware-libertas firmware-realtek hydra initramfs-tools john \
libnfc-bin locales-all medusa metasploit-framework mfoc ncrack nmap passing-the-hash proxychains recon-ng \
sqlmap tcpdump theharvester tor tshark u-boot-tools usbutils vboot-utils vboot-kernel-utils \
whois windows-binaries winexe wpscan "
####################################################################################################
kalSysPack="alsa-tools aircrack-ng apache2 armitage autossh \
backdoor-factory bdfproxy beef-xss burpsuite dbd device-pharmer dnsmasq dnsutils dsniff ettercap-text-only\
florence gpsd hostapd isc-dhcp-server iw kismet kismet-plugins libffi-dev libssl-dev macchanger \
mdk3 mitmproxy nishang openssh-server openvpn p0f php pixiewps postgresql ptunnel python-dnspython \
python-lxml python-m2crypto python-mako python-netaddr python-pcapy python-pip python-setuptools\
python-twisted rfkill socat sox sqlmap sslsplit sslstrip tcpdump tcptrace tightvncserver \
tinyproxy tshark wifite wipe wireshark wpasupplicant zip"
# Desktop Packages
kalDMPack="kali-desktop-core desktop-base xfce4 xfce4-goodies xfce4-places-plugin \
xfce4-terminal xfce4-power-manager-plugins gnome-theme-kali lightdm mousepad network-manager-gnome\
xserver-xorg-input-synaptics"
####################################################################################################
# optional packages 
#kalCAW = Advanced Web Attacks and Exploitation
#kalCPW = Penetration Testing with Kali
kalCAWPack="burpsuite firefox-esr impacket-scripts netcat-traditional network-manager-openvpn-gnome \
openjdk-11-jdk-headless python2 rdesktop xfreerdp"

kalCPWPack="apache2 atftpd cewl cherrytree crunch dnsenum dnsrecon dnsutils edb-debugger \
enum4linux exploitdb firefox-esr hash-identifier hydra iptables john medusa metasploit-framework \
mingw-w64 nano nbtscan ncat ncrack net-tools netcat-traditional network-manager-openvpn-gnome \
nmap onesixtyone openjdk-11-jdk-headless openssh-server openvas openvpn passing-the-hash \
proxychains pure-ftpd python recon-ng rinetd sbd snmp snmpcheck sqlmap stunnel4 tcpdump\
theharvester upx-ucl wget whois windows-binaries wine wireshark"
####################################################################################################

#Kali Misc tools
#kalMT=$(cat <<EOF
# kali-linux-core
# kali-linux-default
# kali-linux-large
# kali-linux-nethunter
# kali-tools-802-11
# kali-tools-bluetooth
# kali-tools-database
# kali-tools-exploitation
# kali-tools-forensics
# kali-tools-fuzzing
# kali-tools-gpu
# kali-tools-hardware
# kali-tools-headless
# kali-tools-information-gathering
# kali-tools-passwords
# kali-tools-post-exploitation
# kali-tools-reporting
# kali-tools-reverse-engineering
# kali-tools-rfid
# kali-tools-sdr
# kali-tools-sniffing-spoofing
# kali-tools-social-engineering
# kali-tools-crypto-stego
# kali-tools-top10
# kali-tools-voip
# kali-tools-vulnerability
# kali-tools-web
# kali-tools-windows-resources
# kali-tools-wireless
# android-sdk
# device-pharmer
# exploitdb-bin-sploits
# exploitdb-papers
# freeradius
# hackersh
# htshells
# ident-user-enum
# ismtp
# linux-exploit-suggester
# openvas
# parsero
# payloadsallthethings
# python-halberd
# sandi
# set
# shellnoob
# shellter
# teamsploit
# veil
# webhandler
# websploit
# bruteforce-salted-openssl
# brutespray
# capstone-tool
# changeme
# chaosreader
# crack
# dislocker
# goldeneye
# knocker
# nmapsi4
# o-saft
# pnscan
# pompem
# princeprocessor
# shed
# testssl.sh
# wig
#EOF)

# Create, clean rootfs
clean_rootfs(){
 if [ "$1" == "yes" ]; then
	msgBox "a" "+" " clean RootFS"
	rm -r $VRFS
 elif [ "$1" == "no" ]; then 
	#msgBox "w" "+" " rootfs: no cleanup"
	rcn=null
 elif [ "$1" == "create" ];then	
 	msgBox "a" "+" " create RootFS"
	mkdir -p $VRFS
 fi 		
}


build_rootfs(){
#install Required Tools for RootFS
rT="debootstrap qemu-user-static"

exP="xfce4 kali-menu wpasupplicant kali-defaults initramfs-tools u-boot-tools nmap openssh-server"
export packages="${exP}"
msgBox "a" "+" "get kali-defaults"
apt-wait install $rT

cd $VRFS
msgBox "a" "+" "set debootstrap to $tName-$architecture "
debootstrap --foreign --arch $architecture kali-rolling $tName-$architecture http://http.kali.org/kali >/dev/null 2>&1
cp /usr/bin/qemu-$SUBARCH-static $tName-$architecture/usr/bin/
msgBox "ii" "+" "debootstrap done"
stage_1
stage_2
stage_3
stage_4
}
stage_1(){
#generate msgBox Script in chroot
msgBox "a" "+" "generate some helper Scripts in change root"
cd $VRFS
bMsg=""
cat <<EOF > $tName-$architecture/msgBox
#!/bin/bash
# autogenerated file by $sName
# String handling for msgBox()
strInfo="\e[1;37;4;44mInfo:\e[0m"
strActn="\e[1;33;4;95mAction:\e[0m"
strAnsW="\e[1;33;4;95mInfo:\e[0m"
strQuest="\e[1;33;4;95mQuestion:\e[0m"
strWarn="\e[33;1mWarning:\e[0m"
strSucs="\e[92;1mSuccess:\e[0m"
strErr="\e[31;1mError\e[0m"
msgBox(){
#$1 == type {d,s,w,e}
#$bHead == line header [***] [+] [++]..
#$3 == msgstr
#$4 == PID for working rotation  1s
#$5 == debug_logfile
bType="\${1}"
bHead=""
bMsg=""
bStr=\$3
BDebug="\${5}"

# Line breaker Settings
case \$2 in
	x ) bMsg="\${bMsg}***";bHead="***";;
	+ ) bMsg="\${bMsg} [+]";bHead="";;
	++ ) bMsg="\${bMsg} [++]";bHead="";;
	+++ ) bMsg="\${bMsg} [+++]"; bHead="";;	
#	* ) bMsg="";bHead="";;
esac
# type of msg
case \$1 in
	[d] ) bMsg="\${bMsg} \${bStr} \${bHead}";;
	[i] ) bMsg="\${bMsg} \${strInfo} \$bStr \${bHead}";;
	[a] ) bMsg="\${bMsg} \${strActn} \$bStr \${bHead}";;
	ii ) bMsg="\${bMsg} \${strAnsW} \$bStr \${bHead}";;
	[q] ) bMsg="\${bMsg} \${strQuest} \$bStr \${bHead}";;
	[s] ) bMsg="\${bMsg} \${strSucs} \$bStr \${bHead}";;
	[w] ) bMsg="\${bMsg} \${strWarn} \$bStr \${bHead}";;
	[e] ) bMsg="\${bMsg} \${strErr} \$bStr \${bHead}";;
	* ) bMsg="\${bMsg} \$bStr  \${bHead}";;
esac
echo -e "\$bMsg"
}

EOF
chmod +x $tName-$architecture/msgBox
}
stage_2(){
msgBox "a" "+" "setup Basic confs in RootFS"
cd $VRFS
LANG=C chroot $tName-$architecture /debootstrap/debootstrap --second-stage >/dev/null 2>&1
cat <<EOF > $tName-$architecture/etc/apt/sources.list
# autogenerated file by $sName
deb http://http.kali.org/kali kali-rolling main non-freecontrib
EOF

echo "${tName}" > $tName-$architecture/etc/hostname
cat <<EOF > $tName-$architecture/etc/network/interfaces
# autogenerated file by $sName
auto lo
iface lo inet loopback
auto eth0 
iface eth0 inet dhcp
#this makes maybe an error 
auto wlan0 
iface wlan0 inet dhcp
EOF

cat <<EOF > $tName-$architecture/etc/resolv.conf
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF

msgBox "s" "+" " Basic Scripts done"

}
stage_3(){
msgBox "a" "+" "do some Workaround to success"
export MALLOC_CHECK_=0
export LC_ALL=C
export DEBIAN_FRONTEND=noninteractive
msgBox "ii" "+" "Workarounds done"
msgBox "a" "+" "Mount RootsFS"
mount -t proc proc $tName-$architecture/proc
mount -o bind /dev/ $tName-$architecture/dev/
mount -o bind /dev/pts $tName-$architecture/dev/pts/

cat <<EOF > $tName-$architecture/debconf.set
# autogenerated file by $sName
console-common console-data/keymap/policy select Select keymapfrom full list
console-common console-data/keymap/full select keymap select de-latin1-nodeadkeys
EOF

cat <<EOF > $tName-$architecture/third-stage
#!/bin/bash
# autogenerated file by $sName
source /msgBox
dpkg-divert --add --local --divert /usr/sbin/invoke-rc.d.chroot --rename /usr/sbin/invoke-rc.d
cp /bin/true /usr/sbin/invoke-rc.d
msgBox "a" "++" "update Chroot"
apt -qq -y update >/dev/null 2>&1
msgBox "a" "++" "install locales to chroot"
apt -qq -y install locales-all >/dev/null 2>&1
debconf-set-selections /debconf.set
rm -f /debconf.set
apt -qq -y update >/dev/null 2>&1
msgBox "a" "++" "install tools to chroot"
apt install -y -qq git-core zsh binutils ca-certificates initramfs-tools u-boot-tools locales console-common less nano git >/dev/null 2>&1 
msgBox "a" "++" "create user vendetta"
useradd vendetta
echo "vendetta:vendetta" | chpasswd
sed -i -e 's/KERNEL\!=\"eth\*|/KERNEL \!=\"/' /lib/udev/rules.d/75-persistent-net-generator.rules
rm -f /etc/udev/rules.de/70-persistent-net.rules
msgBox "a" "++" "install packages to chroot"
apt install -qq -y --force-yes ${packages} >/dev/null 2>&1
rm -f /usr/sbin/invoke-rc.d
dpkg-divert --remove --rename /usr/sbin/invoke-rc.d
msgBox "a" "++" "remove this helper Script 3.Stage"
rm -f /third-stage
EOF

msgBox "ii" "+" "RootFS mounted"
#run the changeroot
msgBox "a" "+" "run the new RootFS in chroot"
chmod +x $tName-$architecture/third-stage
LANG=C chroot $tName-$architecture /third-stage
msgBox "s" "+" "run RootFS in chroot"
msgBox "i" "+" "if u need to make any further modifications in your rootfs env"
msgBox "i" "+" "u can do so ' LANG=C chroot $tName-$architecture '"
msgBox "i" "+" "onece u have complete, leave chroot by typing 'exit' "

}
stage_4(){
msgBox "a" "+" "cleanup our chroot to free up space"
cat <<EOF > $tName-$architecture/cleanup
#!/bin/bash
# autogenerated file by $sName
source /msgBox
msgBox "a" "++" "cleanup Chroot"
rm -rf /root/.bash_history
msgBox "a" "++" "last update of chroot"
apt -qq -y update >/dev/null 2>&1
msgBox "a" "++" "clean apt"
apt -qq -y clean >/dev/null 2>&1
msgBox "a" "++" "clean helper Scripts"
rm -f /cleanup
rm -f /msgBox
msgBox "s" "++" "chroot is up to date and ready to fire up"
EOF

cd $VRFS
chmod +x $tName-$architecture/cleanup 
LANG=C chroot $tName-$architecture /cleanup
umount $tName-$architecture/proc
umount $tName-$architecture/dev/pts
umount $tName-$architecture/dev/

cd ..
msgBox "s" "+" " cleanup chroot"
msgBox "a" "+" "create start Script for chroot ${tName}-${architecture}_chroot_start"
cat <<EOF > $tName-$architecture"_chroot_start"
#!/bin/bash
# autogenerated file by $sName
# this script will fire up the chroot enviroments
export MALLOC_CHECK_=0 
export LC_ALL=C
export LC_ALL=C
mount -t proc proc $tName-$architecture/proc
mount -o bind /dev/ $tName-$architecture/dev/
mount -o bind /dev/pts $tName-$architecture/dev/pts/
LANG=C chroot $VRFS/$tName-$architecture 
EOF

chmod +x $tName-$architecture"_chroot_start"
msgBox "s" "+" " chroot Startscript created"
msgBox "a" "+" "create start Script for chroot ${tName}-${architecture}_chroot_stop"
cat <<EOF > $tName-$architecture"_chroot_stop"
#!/bin/bash
# autogenerated file by $sName
# this script will fire up the chroot enviroments
umount $tName-$architecture/proc
umount $tName-$architecture/dev/pts
umount $tName-$architecture/dev/
EOF

chmod +x $tName-$architecture"_chroot_stop"
msgBox "s" "+" " chroot Stopscript created"


}
